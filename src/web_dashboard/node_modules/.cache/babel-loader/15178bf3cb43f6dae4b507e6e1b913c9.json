{"ast":null,"code":"var net = require('net');\n\nvar HOST = 'localhost';\nvar PORT = 1234;\nvar client = new net.Socket();\nclient.connect(PORT, HOST, function () {\n  console.log('Client connected to: ' + HOST + ':' + PORT); // Write a message to the socket as soon as the client is connected, the server will receive it as message from the client \n\n  client.write('Hello World!');\n});\nclient.on('data', function (data) {\n  console.log('Client received: ' + data);\n\n  if (data.toString().endsWith('exit')) {\n    client.destroy();\n  }\n}); // Add a 'close' event handler for the client socket\n\nclient.on('close', function () {\n  console.log('Client closed');\n});\nclient.on('error', function (err) {\n  console.error(err);\n});","map":{"version":3,"sources":["C:\\Users\\tuamy\\Documents\\School\\Guardian\\src\\client.js"],"names":["net","require","HOST","PORT","client","Socket","connect","console","log","write","on","data","toString","endsWith","destroy","err","error"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AAEA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,IAAI,GAAG,IAAX;AAEA,IAAIC,MAAM,GAAG,IAAIJ,GAAG,CAACK,MAAR,EAAb;AAEAD,MAAM,CAACE,OAAP,CAAeH,IAAf,EAAqBD,IAArB,EAA2B,YAAW;AAClCK,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BN,IAA1B,GAAiC,GAAjC,GAAuCC,IAAnD,EADkC,CAElC;;AACAC,EAAAA,MAAM,CAACK,KAAP,CAAa,cAAb;AAEH,CALD;AAOAL,MAAM,CAACM,EAAP,CAAU,MAAV,EAAkB,UAASC,IAAT,EAAe;AAC7BJ,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBG,IAAlC;;AACC,MAAIA,IAAI,CAACC,QAAL,GAAgBC,QAAhB,CAAyB,MAAzB,CAAJ,EAAsC;AACpCT,IAAAA,MAAM,CAACU,OAAP;AACF;AACJ,CALD,E,CAOA;;AACAV,MAAM,CAACM,EAAP,CAAU,OAAV,EAAmB,YAAW;AAC1BH,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,CAFD;AAIAJ,MAAM,CAACM,EAAP,CAAU,OAAV,EAAmB,UAASK,GAAT,EAAc;AAC7BR,EAAAA,OAAO,CAACS,KAAR,CAAcD,GAAd;AACH,CAFD","sourcesContent":["var net = require('net');\r\n \r\nvar HOST = 'localhost';\r\nvar PORT = 1234;\r\n \r\nvar client = new net.Socket();\r\n \r\nclient.connect(PORT, HOST, function() {\r\n    console.log('Client connected to: ' + HOST + ':' + PORT);\r\n    // Write a message to the socket as soon as the client is connected, the server will receive it as message from the client \r\n    client.write('Hello World!');\r\n \r\n});\r\n \r\nclient.on('data', function(data) {    \r\n    console.log('Client received: ' + data);\r\n     if (data.toString().endsWith('exit')) {\r\n       client.destroy();\r\n    }\r\n});\r\n \r\n// Add a 'close' event handler for the client socket\r\nclient.on('close', function() {\r\n    console.log('Client closed');\r\n});\r\n \r\nclient.on('error', function(err) {\r\n    console.error(err);\r\n});"]},"metadata":{},"sourceType":"module"}